{"version":3,"sources":["index.js","matrix.js","vector.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vector = exports.Matrix = undefined;\n\nvar _matrix = require('./matrix');\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _vector = require('./vector');\n\nvar _vector2 = _interopRequireDefault(_vector);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Matrix = _matrix2.default;\nexports.Vector = _vector2.default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// from https://github.com/chrisaljoudi/transformatrix.js\n/**\n  default:\n          (1, 0, 0)\n          (0, 1, 0)\n */\nvar Matrix = function Matrix(m) {\n  m = m || [1, 0, 0, 1, 0, 0];\n  this.m = [m[0], m[1], m[2], m[3], m[4], m[5]];\n};\n\nMatrix.prototype.unit = function () {\n  this.m = [1, 0, 0, 1, 0, 0];\n  return this;\n};\n\nMatrix.prototype.multiply = function (m) {\n  var m1 = this.m;\n  var m2 = void 0;\n\n  if (m instanceof Matrix) {\n    m2 = m.m;\n  } else {\n    m2 = m;\n  }\n\n  var m11 = m1[0] * m2[0] + m1[2] * m2[1],\n      m12 = m1[1] * m2[0] + m1[3] * m2[1],\n      m21 = m1[0] * m2[2] + m1[2] * m2[3],\n      m22 = m1[1] * m2[2] + m1[3] * m2[3];\n\n  var dx = m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      dy = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n\n  m1[0] = m11;\n  m1[1] = m12;\n  m1[2] = m21;\n  m1[3] = m22;\n  m1[4] = dx;\n  m1[5] = dy;\n\n  return this;\n};\n\nMatrix.prototype.inverse = function () {\n  var inv = new Matrix(this.m),\n      invm = inv.m;\n\n  var d = 1 / (invm[0] * invm[3] - invm[1] * invm[2]),\n      m0 = invm[3] * d,\n      m1 = -invm[1] * d,\n      m2 = -invm[2] * d,\n      m3 = invm[0] * d,\n      m4 = d * (invm[2] * invm[5] - invm[3] * invm[4]),\n      m5 = d * (invm[1] * invm[4] - invm[0] * invm[5]);\n\n  invm[0] = m0;\n  invm[1] = m1;\n  invm[2] = m2;\n  invm[3] = m3;\n  invm[4] = m4;\n  invm[5] = m5;\n\n  return inv;\n};\n\n/**\n  (1, 0, sx)\n  (0, 1, sy)\n * */\nMatrix.prototype.translate = function (x, y) {\n  return this.multiply([1, 0, 0, 1, x, y]);\n};\n\n/**\n    (cos, -sin, 0)\n    (sin, cos, 0)\n */\nMatrix.prototype.rotate = function (deg) {\n  var rad = deg * Math.PI / 180,\n      c = Math.cos(rad),\n      s = Math.sin(rad);\n\n  return this.multiply([c, s, -s, c, 0, 0]);\n};\n\n/**\n    (1, tx, 0)\n    (ty, 1, 0)\n */\nMatrix.prototype.skew = function (degX, degY) {\n  degY |= 0;\n  var radX = degX * Math.PI / 180,\n      radY = degY * Math.PI / 180;\n  var tx = Math.tan(radX),\n      ty = Math.tan(radY);\n\n  return this.multiply([1, ty, tx, 1, 0, 0]);\n};\n\n/**\n  (sx, 0, 0)\n  (0, sy, 0)\n */\nMatrix.prototype.scale = function (sx, sy) {\n  return this.multiply([sx, 0, 0, sy, 0, 0]);\n};\n\nMatrix.prototype.transformPoint = function (px, py) {\n  var x = px,\n      y = py;\n  px = x * this.m[0] + y * this.m[2] + this.m[4];\n  py = x * this.m[1] + y * this.m[3] + this.m[5];\n\n  return [px, py];\n};\n\nMatrix.prototype.transformVector = function (px, py) {\n  var x = px,\n      y = py;\n  px = x * this.m[0] + y * this.m[2];\n  py = x * this.m[1] + y * this.m[3];\n\n  return [px, py];\n};\n\nexports.default = Matrix;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Vector = function () {\n  function Vector(p1) {\n    var p2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    (0, _classCallCheck3.default)(this, Vector);\n\n    var _p = (0, _slicedToArray3.default)(p1, 3),\n        x1 = _p[0],\n        y1 = _p[1],\n        z1 = _p[2],\n        _p2 = (0, _slicedToArray3.default)(p2, 3),\n        x2 = _p2[0],\n        y2 = _p2[1],\n        z2 = _p2[2];\n\n    z1 = z1 || 0;\n    z2 = z2 || 0;\n\n    this.x = x1 - x2;\n    this.y = y1 - y2;\n    this.z = z1 - z2;\n  }\n\n  (0, _createClass3.default)(Vector, [{\n    key: \"unit\",\n    value: function unit() {\n      var length = this.length;\n      return new Vector([this.x / length, this.y / length, this.z / length]);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(v) {\n      var x1 = this.x,\n          y1 = this.y,\n          z1 = this.z,\n          x2 = v.x,\n          y2 = v.y,\n          z2 = v.z;\n\n      return new Vector([y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - x2 * y1]);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n\n      return Math.sqrt(x * x + y * y + z * z);\n    }\n  }]);\n  return Vector;\n}();\n\nexports.default = Vector;"]}