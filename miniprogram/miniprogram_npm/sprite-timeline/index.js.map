{"version":3,"sources":["index.js","utils.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _map = require('babel-runtime/core-js/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _symbol = require('babel-runtime/core-js/symbol');\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _nowtime = (0, _utils.createNowTime)();\n\nvar defaultOptions = {\n  originTime: 0,\n  playbackRate: 1.0\n};\n\nvar _timeMark = (0, _symbol2.default)('timeMark'),\n    _playbackRate = (0, _symbol2.default)('playbackRate'),\n    _timers = (0, _symbol2.default)('timers'),\n    _originTime = (0, _symbol2.default)('originTime'),\n    _setTimer = (0, _symbol2.default)('setTimer'),\n    _parent = (0, _symbol2.default)('parent');\n\nvar Timeline = function () {\n  function Timeline(options, parent) {\n    (0, _classCallCheck3.default)(this, Timeline);\n\n    if (options instanceof Timeline) {\n      parent = options;\n      options = {};\n    }\n\n    options = (0, _assign2.default)({}, defaultOptions, options);\n\n    if (parent) {\n      this[_parent] = parent;\n    }\n\n    var nowtime = options.nowtime || _nowtime;\n    if (!parent) {\n      var createTime = nowtime();\n      Object.defineProperty(this, 'globalTime', {\n        get: function get() {\n          return nowtime() - createTime;\n        }\n      });\n    } else {\n      Object.defineProperty(this, 'globalTime', {\n        get: function get() {\n          return parent.currentTime;\n        }\n      });\n    }\n\n    // timeMark records the reference points on timeline\n    // Each time we change the playbackRate or currentTime or entropy\n    // A new timeMark will be generated\n    // timeMark sorted by entropy\n    // If you reset entropy, all the timeMarks behind the new entropy\n    // should be dropped\n    this[_timeMark] = [{\n      globalTime: this.globalTime,\n      localTime: -options.originTime,\n      entropy: -options.originTime,\n      playbackRate: options.playbackRate,\n      globalEntropy: 0\n    }];\n\n    if (this[_parent]) {\n      this[_timeMark][0].globalEntropy = this[_parent].entropy;\n    }\n\n    this[_originTime] = options.originTime;\n    this[_playbackRate] = options.playbackRate;\n    this[_timers] = new _map2.default();\n  }\n\n  (0, _createClass3.default)(Timeline, [{\n    key: 'markTime',\n    value: function markTime() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$time = _ref.time,\n          time = _ref$time === undefined ? this.currentTime : _ref$time,\n          _ref$entropy = _ref.entropy,\n          entropy = _ref$entropy === undefined ? this.entropy : _ref$entropy,\n          _ref$playbackRate = _ref.playbackRate,\n          playbackRate = _ref$playbackRate === undefined ? this.playbackRate : _ref$playbackRate;\n\n      var timeMark = {\n        globalTime: this.globalTime,\n        localTime: time,\n        entropy: entropy,\n        playbackRate: playbackRate,\n        globalEntropy: this.globalEntropy\n      };\n      this[_timeMark].push(timeMark);\n    }\n  }, {\n    key: 'fork',\n    value: function fork(options) {\n      return new Timeline(options, this);\n    }\n  }, {\n    key: 'seekGlobalTime',\n    value: function seekGlobalTime(seekEntropy) {\n      var idx = this.seekTimeMark(seekEntropy),\n          timeMark = this[_timeMark][idx];\n\n      var entropy = timeMark.entropy,\n          playbackRate = timeMark.playbackRate,\n          globalTime = timeMark.globalTime;\n\n\n      return globalTime + (seekEntropy - entropy) / Math.abs(playbackRate);\n    }\n  }, {\n    key: 'seekLocalTime',\n    value: function seekLocalTime(seekEntropy) {\n      var idx = this.seekTimeMark(seekEntropy),\n          timeMark = this[_timeMark][idx];\n\n      var localTime = timeMark.localTime,\n          entropy = timeMark.entropy,\n          playbackRate = timeMark.playbackRate;\n\n\n      if (playbackRate > 0) {\n        return localTime + (seekEntropy - entropy);\n      }\n      return localTime - (seekEntropy - entropy);\n    }\n  }, {\n    key: 'seekTimeMark',\n    value: function seekTimeMark(entropy) {\n      var timeMark = this[_timeMark];\n\n      var l = 0,\n          r = timeMark.length - 1;\n\n      if (entropy <= timeMark[l].entropy) {\n        return l;\n      }\n      if (entropy >= timeMark[r].entropy) {\n        return r;\n      }\n\n      var m = Math.floor((l + r) / 2); // binary search\n\n      while (m > l && m < r) {\n        if (entropy === timeMark[m].entropy) {\n          return m;\n        }if (entropy < timeMark[m].entropy) {\n          r = m;\n        } else if (entropy > timeMark[m].entropy) {\n          l = m;\n        }\n        m = Math.floor((l + r) / 2);\n      }\n\n      return l;\n    }\n  }, {\n    key: 'updateTimers',\n    value: function updateTimers() {\n      var _this = this;\n\n      var timers = [].concat((0, _toConsumableArray3.default)(this[_timers]));\n      timers.forEach(function (_ref2) {\n        var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),\n            id = _ref3[0],\n            timer = _ref3[1];\n\n        _this[_setTimer](timer.handler, timer.time, id);\n      });\n    }\n  }, {\n    key: 'clearTimeout',\n    value: function (_clearTimeout) {\n      function clearTimeout(_x) {\n        return _clearTimeout.apply(this, arguments);\n      }\n\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n\n      return clearTimeout;\n    }(function (id) {\n      var timer = this[_timers].get(id);\n\n      if (timer && timer.timerID != null) {\n        if (this[_parent]) {\n          this[_parent].clearTimeout(timer.timerID);\n        } else {\n          clearTimeout(timer.timerID);\n        }\n      }\n      this[_timers].delete(id);\n    })\n  }, {\n    key: 'clearInterval',\n    value: function clearInterval(id) {\n      return this.clearTimeout(id);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      var _this2 = this;\n\n      // clear all running timers\n      var timers = this[_timers];[].concat((0, _toConsumableArray3.default)(timers.keys())).forEach(function (id) {\n        _this2.clearTimeout(id);\n      });\n    }\n\n    /*\n      setTimeout(func, {delay: 100, isEntropy: true})\n      setTimeout(func, {entropy: 100})\n      setTimeout(func, 100})\n     */\n\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(handler) {\n      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { delay: 0 };\n\n      return this[_setTimer](handler, time);\n    }\n  }, {\n    key: 'setInterval',\n    value: function setInterval(handler) {\n      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { delay: 0 };\n\n      var that = this;\n      var id = this[_setTimer](function step() {\n        // reset timer before handler cause we may clearTimeout in handler()\n        that[_setTimer](step, time, id);\n        handler();\n      }, time);\n\n      return id;\n    }\n  }, {\n    key: _setTimer,\n    value: function value(handler, time) {\n      var _this3 = this;\n\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _symbol2.default)('timerID');\n\n      time = (0, _utils.formatDelay)(time);\n\n      var timer = this[_timers].get(id);\n      var delay = void 0,\n          timerID = null,\n          startTime = void 0,\n          startEntropy = void 0;\n\n      if (timer) {\n        this.clearTimeout(id);\n        if (time.isEntropy) {\n          delay = (time.delay - (this.entropy - timer.startEntropy)) / Math.abs(this.playbackRate);\n        } else {\n          delay = (time.delay - (this.currentTime - timer.startTime)) / this.playbackRate;\n        }\n        startTime = timer.startTime;\n        startEntropy = timer.startEntropy;\n      } else {\n        delay = time.delay / (time.isEntropy ? Math.abs(this.playbackRate) : this.playbackRate);\n        startTime = this.currentTime;\n        startEntropy = this.entropy;\n      }\n\n      var parent = this[_parent],\n          globalTimeout = parent ? parent.setTimeout.bind(parent) : setTimeout;\n\n      var heading = time.heading;\n      // console.log(heading, parent, delay)\n      if (!parent && heading === false && delay < 0) {\n        delay = Infinity;\n      }\n\n      // if playbackRate is zero, delay will be infinity.\n      // For wxapp bugs, cannot use Number.isFinite yet.\n      if (isFinite(delay) || parent) {\n        // eslint-disable-line no-restricted-globals\n        delay = Math.ceil(delay);\n        if (globalTimeout !== setTimeout) {\n          delay = { delay: delay, heading: heading };\n        }\n        timerID = globalTimeout(function () {\n          _this3[_timers].delete(id);\n          handler();\n        }, delay);\n      }\n\n      this[_timers].set(id, {\n        timerID: timerID,\n        handler: handler,\n        time: time,\n        startTime: startTime,\n        startEntropy: startEntropy\n      });\n\n      return id;\n    }\n  }, {\n    key: 'parent',\n    get: function get() {\n      return this[_parent];\n    }\n  }, {\n    key: 'lastTimeMark',\n    get: function get() {\n      return this[_timeMark][this[_timeMark].length - 1];\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      var _lastTimeMark = this.lastTimeMark,\n          localTime = _lastTimeMark.localTime,\n          globalTime = _lastTimeMark.globalTime;\n\n      return localTime + (this.globalTime - globalTime) * this.playbackRate;\n    },\n    set: function set(time) {\n      var _this4 = this;\n\n      var from = this.currentTime,\n          to = time,\n          timers = this[_timers];\n\n      this.markTime({ time: time });[].concat((0, _toConsumableArray3.default)(timers)).forEach(function (_ref4) {\n        var _ref5 = (0, _slicedToArray3.default)(_ref4, 2),\n            id = _ref5[0],\n            timer = _ref5[1];\n\n        if (!timers.has(id)) return; // Need check because it maybe clearTimeout by former handler().\n        var _timer$time = timer.time,\n            isEntropy = _timer$time.isEntropy,\n            delay = _timer$time.delay,\n            heading = _timer$time.heading,\n            handler = timer.handler,\n            startTime = timer.startTime;\n\n\n        if (!isEntropy) {\n          var endTime = startTime + delay;\n          if (delay === 0 || heading !== false && (to - from) * delay <= 0 || from <= endTime && endTime <= to || from >= endTime && endTime >= to) {\n            handler();\n            _this4.clearTimeout(id);\n          }\n        } else if (delay === 0) {\n          handler();\n          _this4.clearTimeout(id);\n        }\n      });\n      this.updateTimers();\n    }\n\n    // Both currentTime and entropy should be influenced by playbackRate.\n    // If current playbackRate is negative, the currentTime should go backwards\n    // while the entropy remain to go forwards.\n    // Both of the initial values is set to -originTime\n\n  }, {\n    key: 'entropy',\n    get: function get() {\n      var _lastTimeMark2 = this.lastTimeMark,\n          entropy = _lastTimeMark2.entropy,\n          globalEntropy = _lastTimeMark2.globalEntropy;\n\n      return entropy + Math.abs((this.globalEntropy - globalEntropy) * this.playbackRate);\n    },\n\n\n    // get globalTime() {\n    //   if(this[_parent]) {\n    //     return this[_parent].currentTime;\n    //   }\n\n    //   return nowtime();\n    // }\n\n    // change entropy will NOT cause currentTime changing but may influence the pass\n    // and the future of the timeline. (It may change the result of seek***Time)\n    // While entropy is set, all the marks behind will be droped\n    set: function set(entropy) {\n      if (this.entropy > entropy) {\n        var idx = this.seekTimeMark(entropy);\n        this[_timeMark].length = idx + 1;\n      }\n      this.markTime({ entropy: entropy });\n      this.updateTimers();\n    }\n  }, {\n    key: 'globalEntropy',\n    get: function get() {\n      return this[_parent] ? this[_parent].entropy : this.globalTime;\n    }\n  }, {\n    key: 'playbackRate',\n    get: function get() {\n      return this[_playbackRate];\n    },\n    set: function set(rate) {\n      if (rate !== this.playbackRate) {\n        this.markTime({ playbackRate: rate });\n        this[_playbackRate] = rate;\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: 'paused',\n    get: function get() {\n      if (this.playbackRate === 0) return true;\n      var parent = this.parent;\n      while (parent) {\n        if (parent.playbackRate === 0) return true;\n        parent = parent.parent;\n      }\n      return false;\n    }\n  }]);\n  return Timeline;\n}();\n\nexports.default = Timeline;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNowTime = createNowTime;\nexports.formatDelay = formatDelay;\nfunction createNowTime() {\n  var syncLocker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  var nowtime = null;\n  if (Date.now) {\n    nowtime = Date.now;\n  } else {\n    nowtime = function nowtime() {\n      return new Date().getTime();\n    };\n  }\n\n  return nowtime;\n}\n\n/*\n  delay = 100 -> delay = {delay: 100}\n  delay = {entropy: 100} -> delay = {delay: 100, isEntropy: true}\n */\nfunction formatDelay(delay) {\n  if (typeof delay === 'number') {\n    delay = { delay: delay };\n  } else if ('entropy' in delay) {\n    delay = { delay: delay.entropy, isEntropy: true };\n  }\n  return delay;\n}"]}